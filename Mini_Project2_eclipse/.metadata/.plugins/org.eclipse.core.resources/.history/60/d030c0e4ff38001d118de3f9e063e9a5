/*
 * Mini_project2.c
 *
 *  Created on: Sep 18, 2022
 *      Author: amahe
 */

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void INT0_Init(void);
void INT1_Init(void);
void INT2_Init(void);
void Timer1_CTC_Init(void);

unsigned char g_sec  =0;
unsigned char g_min  =0;
unsigned char g_hour =0;


ISR(INT0_vect) /* Reset */
{
	g_sec  =0;
	g_min  =0;
	g_hour =0;
}

ISR(INT1_vect) /* Pause */
{
	TCCR1B &= ~(1<<CS12) & ~(1<<CS10);
}

ISR(INT2_vect) /* Resume */
{
	TCCR1B |= (1<<CS12) | (1<<CS10);
}

ISR (TIMER1_COMPA_vect)
{
		if (g_sec == 60 )
		{
			g_min ++;
			g_sec = 0;
			if (g_min == 60)
			{
				g_hour++;
				g_min=0;
			}
		}

		else
		{
			g_sec ++;
		}


}

void INT0_Init(void)
{
	MCUCR |= (1<<ISC01);  				// Trigger INT0 with the falling edge
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
}

void INT1_Init(void)
{
	MCUCR |= (1<<ISC10) | (1<<ISC11);   /* Trigger INT1 with the raising edge */
	GICR  |= (1<<INT1);                 /* Enable external interrupt pin INT1 */
}

void INT2_Init(void)
{
	GICR  |= (1<<INT2);                 /* Enable external interrupt pin INT2 */
}

void Timer1_CTC_Init(void)
{
	TCNT1 = 0;
	OCR1A = 977;
	TIMSK |= (1<<OCIE1A);
	TCCR1A |= (1<<FOC1A);
	TCCR1B |= (1<<WGM12) | (1<<CS12) | (1<<CS10);

}

int main(void)
{
	DDRD &= ~(1<<PD2) & ~(1<<PD3);   /* clear the DDRX to identify it is a input of the push bottoms */
	DDRB &= ~(1<<PB2);

	DDRA |= 0xFC;  		/* Set bit to make it output*/
	DDRC |= 0x0F;

	SREG  |= (1<<7);    /* Enable interrupts by setting I-bit */

	INT0_Init();
	INT1_Init();
	INT2_Init();
	Timer1_CTC_Init();

	while(1)
	{
		int i;

		for (i=0; i<6 ; i++)
		{
		PORTC = (PORTC & 0xF0) | (g_sec) & 0x0F);
		_delay_ms(1);
		PORTA = (1<<i);
		_delay_ms (1);
		PORTA &= ~(1<<i);
		}
		PORTC &= 0xF0;
	}

	return 0;
}

